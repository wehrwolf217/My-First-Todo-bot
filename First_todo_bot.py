#! /usr/bin/env python3
#! /usr/bin/env python3

import datetime
import pickle

import telebot
from telebot import types

token = ''  # –≤–∞—à —Ç–æ–∫–µ–Ω

bot = telebot.TeleBot(token)

todo = {}

keyboard_main = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
keyboard_main.add('—Å–ø—Ä–∞–≤–∫–∞ ‚ùì', '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù', '–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ üìã', '–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É üìÜ',
                  '—É–¥–∞–ª–∏—Ç—å üóë', row_width=2)

keyboard_add = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
keyboard_add.add('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ', '–Ω–∞–∑–∞–¥ üîÑ', row_width=2)

keyboard_del = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
keyboard_del.add('—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É üìëüöÆ', '—É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É üìÉüöÆ', '–Ω–∞–∑–∞–¥ üîÑ', row_width=2)


@bot.message_handler(commands='start')
def bot_start(message):
    """–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–∞—à —Ñ–∞–π–ª–∏–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
     –µ—Å–ª–∏ –±—ã–ª —Ç–æ –µ–≥–æ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π"""
    name = message.from_user.first_name
    filename = f'./todo.txt'  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
    dict_name = message.from_user.id
    with open(filename, 'rb') as f:
        global todo
        todo = pickle.load(f)
        if dict_name in todo:
            msg = bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {name}', reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
        else:
            msg = bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name}', reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
            todo[dict_name] = dict()
    return todo.update()


def process_step(message):
    """–°–≤–∏—Ç—á–µ—Ä"""
    if message.text == '—Å–ø—Ä–∞–≤–∫–∞ ‚ùì':
        bot_help(message)
    elif message.text == '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù':
        todo_add(message)
    elif message.text == '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ':
        create_file(message)
    elif message.text == '—É–¥–∞–ª–∏—Ç—å üóë':
        del_tasks(message)
    elif message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ üìã':
        print_all(message)
    elif message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É üìÜ':
        print_on_date(message)
    elif message.text == '–Ω–∞–∑–∞–¥ üîÑ':
        msg = bot.send_message(message.chat.id, '–Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞', reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)
    else:
        name = message.from_user.first_name
        msg = bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {name}, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–≥–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ',
                               reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)


def bot_help(message):
    """–≤–æ–∑–º–æ–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –¥–ª—è —Å–≤—è–∑–∏..."""
    name = message.from_user.first_name
    msg = bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {name}, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                           reply_markup=keyboard_main)
    bot.register_next_step_handler(msg, process_step)


def todo_add(message):
    """–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã(–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ–ø–ª–æ—Ö–æ –±—ã –Ω–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å)"""
    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
    bot.register_next_step_handler(msg, process_enter_date)


def process_enter_date(message):
    """–∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –¥–∞—Ç–∞"""
    try:
        enter_date = message.text
        day, month, year = map(int, enter_date.split(' '))
        task_date = datetime.date(year, month, day)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ –¥–∞—Ç—É
        msg = bot.reply_to(message, '–≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ')
        bot.register_next_step_handler(msg, lambda msg1: process_add_task(task_date, msg1))
    except ValueError:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
        bot.register_next_step_handler(msg, process_enter_date)


def process_add_task(task_date, message):
    """–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è(—Å–ø–∏—Å–æ–∫)"""
    task = message.text
    dict_name = message.from_user.id
    if dict_name in todo.keys():
        if task_date in todo[dict_name].keys():
            todo[dict_name][task_date].append(task)
        else:
            todo[dict_name][task_date] = list()
            todo[dict_name][task_date].append(task)
    task_date_str = task_date.strftime('%d %m %Y')

    msg = bot.send_message(message.chat.id, f'–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É {task_date_str}, –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ '
                                            f'–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ –≤ –±—É–¥—É—â–µ–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ '
                                            f'–Ω–∞–∂–º–∏—Ç–µ\n*—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å*', reply_markup=keyboard_add)
    bot.register_next_step_handler(msg, process_step)


def create_file(message):
    """—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    name = message.from_user.first_name
    filename = f'./todo.txt'
    with open(filename, 'wb') as f:
        pickle.dump(todo, f)
    msg = bot.send_message(message.chat.id, f'–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}', reply_markup=keyboard_main)
    bot.register_next_step_handler(msg, process_step)


def print_all(message):
    """–≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dict_name = message.from_user.id
    if todo[dict_name]:
        for t_date, tasks in sorted(todo[dict_name].items()):
            t_date = datetime.date.strftime(t_date, "%d-%m-%Y")  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å–Ω–≥
            string = str('\n'.join('%d  %s' % (i, s) for i, s in enumerate(tasks, 1)))
            bot.send_message(message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {t_date}:\n{string}")
        msg = bot.send_message(message.chat.id, f"–°–¥–µ–ª–∞–ª –¥–µ–ª–æ, –≥—É–ª—è–π —Å–º–µ–ª–æ!", reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)
    else:
        msg = bot.send_message(message.chat.id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á', reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)


def print_on_date(message):
    """–ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∑–∞–¥–∞—á–∏"""
    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
    bot.register_next_step_handler(msg, process_print_date)


def process_print_date(message):
    """–≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        dict_name = message.from_user.id
        enter_date = message.text
        day, month, year = map(int, enter_date.split(' '))
        task_date = datetime.date(year, month, day)
        if task_date in todo[dict_name]:
            tasks = todo[dict_name][task_date]
            string = str('\n'.join('%d  %s' % (i, t) for i, t in enumerate(tasks, 1)))
            t_date = datetime.date.strftime(task_date, "%d-%m-%Y")
            msg = bot.send_message(message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {t_date}:\n{string}",
                                   reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
        else:
            msg = bot.send_message(message.chat.id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É', reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
    except ValueError:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
        bot.register_next_step_handler(msg, process_print_date)


def del_tasks(message):
    """–ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∑–∞–¥–∞—á–∏"""
    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
    bot.register_next_step_handler(msg, choice_del)


def choice_del(message):
    """–≤—ã–±–∏—Ä–∞–µ–º —á—Ç–æ —É–¥–∞–ª—è—Ç—å(–¥–∞—Ç—É)"""
    try:
        dict_name = message.from_user.id
        enter_date = message.text
        day, month, year = map(int, enter_date.split(' '))
        task_date = datetime.date(year, month, day)
        if task_date in todo[dict_name]:
            tasks = todo[dict_name][task_date]
            string = str('\n'.join('%d  %s' % (i, t) for i, t in enumerate(tasks, 1)))
            t_date = datetime.date.strftime(task_date, "%d-%m-%Y")
            msg = bot.send_message(message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {t_date}:\n{string}",
                                   reply_markup=keyboard_del)
            bot.register_next_step_handler(msg, lambda msg1: process_del(task_date, msg1))
        else:
            msg = bot.send_message(message.chat.id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É', reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
    except ValueError:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥(–ø—Ä–∏–º–µ—Ä: 28 01 2021): ')
        bot.register_next_step_handler(msg, choice_del)


def process_del(task_date, message):
    """—Å–≤–∏—á–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π"""
    dict_name = message.from_user.id
    if message.text == '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É üìëüöÆ':
        del todo[dict_name][task_date]
        todo.update()
        create_file(message)
    elif message.text == '—É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É üìÉüöÆ':
        msg = bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ')
        bot.register_next_step_handler(msg, lambda msg1: del_one_task(task_date, msg1))
    elif message.text == '–Ω–∞–∑–∞–¥ üîÑ':
        msg = bot.send_message(message.chat.id, '–Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞', reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)


def del_one_task(task_date, message):
    """—É–¥–∞–ª—è–µ–º –ø–æ 1–π –∑–∞–¥–∞—á–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    dict_name = message.from_user.id
    if message.text.isdigit() and int(message.text) != 0:
        task_num = int(message.text) - 1
        try:
            del todo[dict_name][task_date][task_num]
            if len(todo[dict_name][task_date]) == 0:
                del todo[dict_name][task_date]
                todo.update()
                create_file(message)
                bot.send_message(message.chat.id, f'–∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω—ã', reply_markup=keyboard_main)
            else:
                todo.update()
                create_file(message)
                tasks = todo[dict_name][task_date]
                string = str('\n'.join('%d  %s' % (i, t) for i, t in enumerate(tasks, 1)))
                t_date = datetime.date.strftime(task_date, "%d-%m-%Y")
                bot.send_message(message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á –Ω–∞ {t_date}:\n{string}",
                                 reply_markup=keyboard_main)
        except IndexError:
            msg = bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ', reply_markup=keyboard_main)
            bot.register_next_step_handler(msg, process_step)
    else:
        msg = bot.send_message(message.chat.id, '–º–Ω–µ –Ω—É–∂–µ–Ω –±—ã–ª –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=keyboard_main)
        bot.register_next_step_handler(msg, process_step)


bot.polling(none_stop=True)
